#!/usr/bin/env python3
"""
Module: adaptive_allocation_engine.py
Purpose: Adaptive Allocation Engine (Decision-Making) for the Adaptive Resource Allocation System.

This module receives aggregated system metrics (simulated in this example), applies rule-based decision logic 
based on predefined thresholds, and outputs resource allocation recommendations in JSON format.

Simulated Aggregated Metrics:
- CPU average: 85.0 (which triggers a "reduce_non_critical" decision because it exceeds the threshold of 80.0)
- Memory average: 70.0 (within acceptable range, so "normal" decision)
- Timestamp: "2025-02-14T17:06:48Z"
"""
import json
import time
import logging

# Configure logging with a timestamped format
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Decision thresholds (non-modifiable)
CPU_THRESHOLD = 80.0       # If average CPU usage > 80%, then adjust accordingly
MEMORY_THRESHOLD = 75.0    # If average memory usage > 75%, then flag high usage
def decide_allocation(aggregated_metrics):
    """
    Applies rule-based decision logic to the aggregated system metrics.

    Parameters:
        aggregated_metrics (dict): Expected structure:
        {
            "cpu_percent": {"avg": float, "min": float, "max": float, "std": float},
            "memory_percent": {"avg": float, "min": float, "max": float, "std": float},
            "timestamp": str
        }

    Returns:
        dict: Decision recommendations with keys:
            - "timestamp": as provided in the input.
            - "cpu_adjustment": "reduce_non_critical" if avg CPU > CPU_THRESHOLD, else "normal".
            - "memory_adjustment": "flag_high_usage" if avg memory > MEMORY_THRESHOLD, else "normal".
            - "details": Contains "cpu_avg" and "memory_avg".
    """
 try:
        cpu_stats = aggregated_metrics["cpu_percent"]
        memory_stats = aggregated_metrics["memory_percent"]
        timestamp = aggregated_metrics["timestamp"]
    except KeyError as e:
        logging.error("Missing required metric: %s", str(e))
        raise ValueError("Aggregated metrics missing required key: " + str(e))
    
    decisions = {
        "timestamp": timestamp,
        "cpu_adjustment": "normal",
        "memory_adjustment": "normal",
        "details": {
            "cpu_avg": cpu_stats.get("avg", 0),
            "memory_avg": memory_stats.get("avg", 0)
        }
    }
    
    # Apply CPU decision rule
    if cpu_stats.get("avg", 0) > CPU_THRESHOLD:
        decisions["cpu_adjustment"] = "reduce_non_critical"
    
    # Apply Memory decision rule
    if memory_stats.get("avg", 0) > MEMORY_THRESHOLD:
        decisions["memory_adjustment"] = "flag_high_usage"
    
    # Log the decision output as a valid JSON string
    decision_json = json.dumps(decisions, indent=4)
    logging.info("Decision Output: %s", decision_json)
    
    return decisions
def get_decision_json(aggregated_metrics):
    """
    Returns the decision output as a JSON-formatted string.

    Parameters:
        aggregated_metrics (dict): Aggregated system metrics.

    Returns:
def simulate_aggregated_metrics():
    """
    Simulates aggregated system metrics for demonstration purposes.

    Returns:
        dict: Simulated aggregated metrics with fixed values.
    """
    simulated_data = {
        "cpu_percent": {"avg": 85.0, "min": 80.0, "max": 90.0, "std": 3.0},
        "memory_percent": {"avg": 70.0, "min": 65.0, "max": 75.0, "std": 2.5},
        "timestamp": "2025-02-14T17:06:48Z"
    }
    return simulated_data
        str: JSON-formatted decision output.
    """
    decisions = decide_allocation(aggregated_metrics)
    return json.dumps(decisions, indent=4
