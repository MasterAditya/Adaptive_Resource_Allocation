#!/usr/bin/env python3
"""
Module: adaptive_allocation_engine.py
Purpose: Adaptive Allocation Engine (Decision-Making) for the Adaptive Resource Allocation System.

This module receives aggregated system metrics (simulated in this example), applies rule-based decision logic 
based on predefined thresholds, and outputs resource allocation recommendations in JSON format.

Simulated Aggregated Metrics:
- CPU average: 85.0 (which triggers a "reduce_non_critical" decision because it exceeds the threshold of 80.0)
- Memory average: 70.0 (within acceptable range, so "normal" decision)
- Timestamp: "2025-02-14T17:06:48Z"
"""
import json
import time
import logging

# Configure logging with a timestamped format
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Decision thresholds (non-modifiable)
CPU_THRESHOLD = 80.0       # If average CPU usage > 80%, then adjust accordingly
MEMORY_THRESHOLD = 75.0    # If average memory usage > 75%, then flag high usage
def decide_allocation(aggregated_metrics):
    """
    Applies rule-based decision logic to the aggregated system metrics.

    Parameters:
        aggregated_metrics (dict): Expected structure:
        {
            "cpu_percent": {"avg": float, "min": float, "max": float, "std": float},
            "memory_percent": {"avg": float, "min": float, "max": float, "std": float},
            "timestamp": str
        }

    Returns:
        dict: Decision recommendations with keys:
            - "timestamp": as provided in the input.
            - "cpu_adjustment": "reduce_non_critical" if avg CPU > CPU_THRESHOLD, else "normal".
            - "memory_adjustment": "flag_high_usage" if avg memory > MEMORY_THRESHOLD, else "normal".
            - "details": Contains "cpu_avg" and "memory_avg".
    """
